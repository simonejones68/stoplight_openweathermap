openapi: 3.0.0
info:
  title: OpenWeathermap API
  version: '1.0'
  description: 'Get the current weather, daily forecast for 16 days, and a three-hour-interval forecast for 5 days for your city. Helpful stats, graphics, and this day in history charts are available for your reference. Interactive maps show precipitation, clouds, pressure, wind around your location stations. Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the OpenWeatherMap API. <br/><br/> **Note**: All parameters are optional, but you must select at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.'
  contact:
    name: Support
    url: 'https://openweathermap.org/api'
    email: some_email@gmail.com
  termsOfService: 'URL: https://openweathermap.org/terms'
  license:
    name: CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)
    url: 'https://openweathermap.org/price'
servers:
  - url: 'https://api.openweathermap.org/data/2.5'
    description: prod
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /weather:
    get:
      summary: weather
      tags:
        - weather endpoints
      operationId: get-weather
      description: |
        Access current weather data for any location on Earth including over 200,000 cities! We collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations. Data is available in JSON, XML, or HTML format.
      security:
        - app_id: []
      parameters:
        - schema:
            type: string
          in: query
          name: zip
          description: '**Zip Code** Search by zip code *Example 95050 Please note if country is not specified then the search works for USA as a default.'
        - schema:
            type: string
          in: query
          name: units
          description: '*Example: imperial*. Possible values: Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. Learn more'
        - schema:
            type: string
          in: query
          name: q
          description: '*Example: London*. You can call by City name, state code and country code divided by comma, use ISO 3166 country codes. You can specify the parameter not only in English. In this case, the API response should be returned in the same language as the language of requested location name if the location is in our predefined list of more than 200,000 locations.'
        - schema:
            type: string
          in: query
          name: 'id '
          description: '**City ID. List of city ID ''city.list.json.gz'' can be downloaded here.'
        - schema:
            type: string
          in: query
          name: lat
          description: '**Latitude**. *Eample: 35*. The latitude coordinate... '
        - schema:
            type: string
          in: query
          name: lon
          description: '**Longitude**.*Example: 139*. Longitude coordinate... '
        - schema:
            type: string
          in: query
          name: lang
          description: '**Language**. *Example: en*. You can use the language parameter...'
        - schema:
            type: string
          in: query
          name: mode
          description: '**Mode*. *Example: html. Determines the format of the response. Possible values are xml and html. If you don''t use the mode parameter format is JSON by default. Learn more '
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                type: object
                properties:
                  coord:
                    type: object
                    description: ''
                    properties:
                      lon:
                        type: number
                        description: 'description: City geo location, longitude'
                        example: 'example: 145.77'
                      lat:
                        type: number
                        description: 'description: City geo location, latitude'
                        example: 'example: -16.92'
                  cod:
                    type: number
                    description: 'description: Internal parameter'
                    example: 'example: 200'
                  name:
                    type: string
                    description: 'description: Name'
                    example: 'example: Cairns'
                  id:
                    type: number
                    description: 'description: City ID'
                    example: 'example: 2172797'
                  sys:
                    type: object
                    properties:
                      type:
                        type: number
                        description: 'description: Internal parameter'
                        example: 'example: 1'
                      id:
                        type: number
                        description: 'description: Internal parameter'
                        example: 'example: 8166'
                      country:
                        type: string
                        description: 'description: ‘Country code (GB, JP etc.)’'
                        example: 'example: AU'
                      sunrise:
                        type: number
                        description: 'description: ‘Sunrise time, unix, UTC’'
                        example: 'example: 1435610796'
                      sunset:
                        type: number
                        description: 'description: ‘Sunset time, unix, UTC’'
                        example: 'example: 1435650870'
                  clouds:
                    type: object
                    properties:
                      all:
                        type: number
                        description: 'description: ‘Cloudiness, %’'
                        example: 'example: 75'
                  wind:
                    type: object
                    properties:
                      speed:
                        type: number
                        description: 'description: ‘Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour.’'
                        example: 'example: 5.1'
                      deg:
                        type: number
                        description: 'description: ‘Wind direction, degrees (meteorological)’'
                        example: 'example: 150'
                  main:
                    type: object
                    properties:
                      temp:
                        type: number
                        description: 'description: ‘Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.’'
                        example: 'example: 293.25'
                      feels_like:
                        type: number
                        description: 'description: What the weather feels like despite the actual numbers'
                        example: 'example: 41.16'
                      temp_min:
                        type: number
                        description: 'description: ‘Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.’'
                        example: 'example: 289.82'
                      temp_max:
                        type: number
                        description: 'description: ‘Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.’'
                        example: 'example: 295.37'
                      pressure:
                        type: number
                        description: 'description: ‘Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa’'
                        example: 'example: 1019'
                      humidity:
                        type: number
                        description: 'description: ‘Humidity, %’'
                        example: 'example: 83'
                  weather:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          description: 'description: Weather condition id'
                          example: 'example: ‘803’'
                        main:
                          type: string
                          description: 'description: ‘Group of weather parameters (Rain, Snow, Extreme etc.)’'
                          example: 'example: clouds'
                        description:
                          type: string
                          description: 'description: Weather condition within the group'
                          example: 'example: broken clouds'
                        icon:
                          type: string
                          description: 'description: Weather icon id'
                          example: 'example: 04n'
                  dt:
                    type: number
                    description: 'description: ‘Time of data calculation, unix, UTC’'
                    example: 'example: 1435658272'
                  visibility:
                    type: number
                    description: 'description: ‘Visibility, meter’'
                    example: 'example: 16093'
                  base:
                    type: string
                    description: 'description: Internal parameter'
                    example: 'example: cmc stations'
            multipart/form-data:
              schema:
                type: object
                properties: {}
            text/plain:
              schema:
                type: object
                properties: {}
            application/json:
              schema:
                type: object
                properties:
                  coord:
                    type: object
                    properties:
                      lon:
                        type: number
                      lat:
                        type: number
                  cod:
                    type: number
                  name:
                    type: string
                  id:
                    type: number
                  sys:
                    type: object
                    properties:
                      type:
                        type: number
                      id:
                        type: number
                      country:
                        type: string
                      sunrise:
                        type: number
                      sunset:
                        type: number
                  dt:
                    type: number
                  clouds:
                    type: object
                    properties:
                      all:
                        type: number
                  wind:
                    type: object
                    properties:
                      speed:
                        type: number
                      deg:
                        type: number
                  visibility:
                    type: number
                  main:
                    type: object
                    properties:
                      temp:
                        type: number
                      feels_like:
                        type: number
                      temp_min:
                        type: number
                      temp_max:
                        type: string
                      pressure:
                        type: number
                      humidity:
                        type: number
                  base:
                    type: string
                  weather:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        main:
                          type: string
                        description:
                          type: string
                        icon:
                          type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorised_response'
            application/xml:
              schema:
                type: object
                properties: {}
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    unauthorised_response:
      title: unauthorised_response
      type: object
      properties:
        cod:
          type: integer
        message:
          type: string
      required:
        - cod
        - message
  securitySchemes:
    app_id:
      name: appid
      type: apiKey
      in: query
